Index: components/org.wso2.carbon.identity.scim2.common/src/main/java/org/wso2/carbon/identity/scim2/common/impl/SCIMUserManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.scim2.common/src/main/java/org/wso2/carbon/identity/scim2/common/impl/SCIMUserManager.java	(date 1578044752000)
+++ components/org.wso2.carbon.identity.scim2.common/src/main/java/org/wso2/carbon/identity/scim2/common/impl/SCIMUserManager.java	(revision )
@@ -50,7 +50,6 @@
 import org.wso2.carbon.user.core.claim.ClaimManager;
 import org.wso2.carbon.user.core.common.AbstractUserStoreManager;
 import org.wso2.carbon.user.core.constants.UserCoreClaimConstants;
-import org.wso2.carbon.user.core.constants.UserCoreErrorConstants;
 import org.wso2.carbon.user.core.model.Condition;
 import org.wso2.carbon.user.core.model.ExpressionAttribute;
 import org.wso2.carbon.user.core.model.ExpressionCondition;
@@ -58,7 +57,6 @@
 import org.wso2.carbon.user.core.model.OperationalCondition;
 import org.wso2.carbon.user.core.model.OperationalOperation;
 import org.wso2.carbon.user.core.model.UniqueIDUserClaimSearchEntry;
-import org.wso2.carbon.user.core.model.UserClaimSearchEntry;
 import org.wso2.carbon.user.core.util.UserCoreUtil;
 import org.wso2.carbon.user.mgt.RolePermissionException;
 import org.wso2.charon3.core.attributes.AbstractAttribute;
@@ -1462,6 +1460,54 @@
         }
     }
 
+    /**
+     * Generate condition tree for given filters.
+     *
+     * @param node       Filter condition tree.
+     * @return Validated filter condition tree.
+     * @throws CharonException
+     */
+    private Condition getConditionForGroupFiltering(Node node) throws CharonException {
+
+        if (node instanceof ExpressionNode) {
+            String operation = ((ExpressionNode) node).getOperation();
+            String attributeName = ((ExpressionNode) node).getAttributeValue();
+            String attributeValue = ((ExpressionNode) node).getValue();
+
+            String conditionOperation;
+            String conditionAttributeName;
+
+            if (SCIMCommonConstants.EQ.equals(operation)) {
+                conditionOperation = ExpressionOperation.EQ.toString();
+            } else if (SCIMCommonConstants.SW.equals(operation)) {
+                conditionOperation = ExpressionOperation.SW.toString();
+            } else if (SCIMCommonConstants.EW.equals(operation)) {
+                conditionOperation = ExpressionOperation.EW.toString();
+            } else if (SCIMCommonConstants.CO.equals(operation)) {
+                conditionOperation = ExpressionOperation.CO.toString();
+            } else {
+                conditionOperation = operation;
+            }
+
+            if (SCIMConstants.GroupSchemaConstants.DISPLAY_URI.equals(attributeName)) {
+                conditionAttributeName = ExpressionAttribute.USERNAME.toString();
+            } else {
+                throw new CharonException("Unsupported attribute: " + attributeName);
+            }
+            return new ExpressionCondition(conditionOperation, conditionAttributeName, attributeValue);
+        } else if (node instanceof OperationNode) {
+            Condition leftCondition = getConditionForGroupFiltering(node.getLeftNode());
+            Condition rightCondition = getConditionForGroupFiltering(node.getRightNode());
+            String operation = ((OperationNode) node).getOperation();
+            if (OperationalOperation.AND.toString().equalsIgnoreCase(operation)) {
+                return new OperationalCondition(OperationalOperation.AND.toString(), leftCondition, rightCondition);
+            } else {
+                throw new CharonException("Unsupported Operation: " + operation);
+            }
+        } else {
+            throw new CharonException("Unsupported Operation");
+        }
+    }
     /**
      * Get all attributes for given domain.
      *
@@ -1969,8 +2015,8 @@
         startIndex = handleStartIndexEqualsNULL(startIndex);
         if (sortBy != null || sortOrder != null) {
             throw new NotImplementedException("Sorting is not supported");
-        } else if (startIndex != 1 || count != null) {
-            throw new NotImplementedException("Pagination is not supported");
+        } else if (count != null && count == 0) {
+            return Collections.emptyList();
         } else if (rootNode != null) {
             return filterGroups(rootNode, startIndex, count, sortBy, sortOrder, domainName, requiredAttributes);
         } else {
@@ -2014,7 +2060,10 @@
         //0th index is to store total number of results;
         groupList.add(0);
         try {
-            Set<String> roleNames = getRoleNamesForGroupsEndpoint(domainName);
+            // Handle limit equals NULL scenario.
+            count = handleLimitEqualsNULL(count);
+
+            Set<String> roleNames = getRoleNamesForGroupsEndpoint(startIndex, count, sortBy, sortOrder, domainName);
             for (String roleName : roleNames) {
                 String userStoreDomainName = IdentityUtil.extractDomainFromName(roleName);
                 if (isInternalOrApplicationGroup(userStoreDomainName) || isSCIMEnabled(userStoreDomainName)) {
@@ -2057,41 +2106,68 @@
      * @throws UserStoreException
      * @throws IdentitySCIMException
      */
-    private Set<String> getRoleNamesForGroupsEndpoint(String domainName)
-            throws UserStoreException, IdentitySCIMException {
+    private Set<String> getRoleNamesForGroupsEndpoint(int startIndex, Integer count, String sortBy, String sortOrder,
+                                                      String domainName)
+            throws UserStoreException, IdentitySCIMException, CharonException {
 
         SCIMGroupHandler groupHandler = new SCIMGroupHandler(carbonUM.getTenantId());
         if (StringUtils.isEmpty(domainName)) {
-            Set<String> roleNames = groupHandler.listSCIMRoles();
-            Set<String> hybridRoles = new HashSet<>(Arrays.asList(carbonUM.getHybridRoles()));
-            List<String> scimDisabledHybridRoles = getSCIMDisabledHybridRoleList(hybridRoles, roleNames);
-            if (!scimDisabledHybridRoles.isEmpty()) {
-                createSCIMAttributesForSCIMDisabledHybridRoles(scimDisabledHybridRoles);
-                roleNames.addAll(scimDisabledHybridRoles);
+            Set<String> roleNames;
+            if (canPaginate(startIndex, count)) {
+                roleNames = groupHandler.listSCIMRoles(startIndex, count);
+            } else {
+                roleNames = groupHandler.listSCIMRoles();
+                Set<String> hybridRoles = new HashSet<>(Arrays.asList(carbonUM.getHybridRoles()));
+                handleSCIMDisabledRoles(hybridRoles, roleNames);
             }
             return roleNames;
         } else {
             // If the domain is specified create a attribute value with the domain name.
             String searchValue = domainName + CarbonConstants.DOMAIN_SEPARATOR + SCIMCommonConstants.ANY;
-
+            Set<String> scimRoles = null;
             List<String> roleList;
+            Set<String> roleNames = new HashSet();
+            if (!canPaginate(startIndex, count)) {
+                scimRoles = groupHandler.listSCIMRoles();
+            }
             // Retrieve roles using the above search value.
             if (isInternalOrApplicationGroup(domainName)) {
                 // Support for hybrid roles listing with domain parameter. ex: domain=Application.
-                roleList = filterHybridRoles(domainName, searchValue);
+                roleList = filterHybridRoles(domainName, searchValue, startIndex, count);
+                if (!canPaginate(startIndex, count)) {
+                    handleSCIMDisabledRoles(new HashSet<>(roleList), scimRoles);
+                }
+                roleNames.addAll(roleList);
             } else {
-                // Retrieve roles using the above attribute value.
-                roleList = Arrays.asList(((AbstractUserStoreManager) carbonUM)
-                        .getRoleNames(searchValue, MAX_ITEM_LIMIT_UNLIMITED, true, true, true));
+                if (canPaginate(startIndex, count)) {
+                    roleList = Arrays.asList(((AbstractUserStoreManager) carbonUM)
+                            .getRoleNames(searchValue, MAX_ITEM_LIMIT_UNLIMITED, true, true,
+                                    true, startIndex, count));
+                    roleNames.addAll(roleList);
+                } else {
+                    // Retrieve roles using the above attribute value.
+                    roleList = Arrays.asList(((AbstractUserStoreManager) carbonUM)
+                            .getRoleNames(searchValue, MAX_ITEM_LIMIT_UNLIMITED, true, true,
+                                    true));
+                    roleNames.addAll(roleList);
+                    handleSCIMDisabledRoles(roleNames, scimRoles);
+                }
             }
-            Set<String> roleNames = new HashSet<>(roleList);
-            Set<String> scimRoles = groupHandler.listSCIMRoles();
+            return roleNames;
+        }
+    }
+
+    private void handleSCIMDisabledRoles(Set<String> roleNames, Set<String> scimRoles)
+            throws CharonException {
+
+        try {
             List<String> scimDisabledHybridRoles = getSCIMDisabledHybridRoleList(roleNames, scimRoles);
             if (!scimDisabledHybridRoles.isEmpty()) {
                 createSCIMAttributesForSCIMDisabledHybridRoles(scimDisabledHybridRoles);
                 roleNames.addAll(scimDisabledHybridRoles);
             }
-            return roleNames;
+        } catch (org.wso2.carbon.user.core.UserStoreException | IdentitySCIMException e) {
+            throw new CharonException("Error in retrieving SCIM Group information from database.", e);
         }
     }
 
@@ -2163,7 +2239,9 @@
         // 0th index is to store total number of results.
         filteredGroups.add(0);
         try {
-            List<String> roleList = getGroupList(node, domainName);
+            List<String> roleList = getGroupList(node, domainName, startIndex, count);
+//            String[] roleList = carbonUM.getRoleList(getConditionForGroupFiltering(node),domainName,
+//                    null, count, startIndex, null, null);
             if (roleList != null) {
                 for (String roleName : roleList) {
                     if (roleName != null && carbonUM.isExistingRole(roleName, false)) {
@@ -3198,6 +3276,41 @@
                 || SCIMConstants.GroupSchemaConstants.DISPLAY_URI.equalsIgnoreCase(attributeName);
     }
 
+    /**
+     * Get list of roles that matches the search criteria.
+     *
+     * @param attributeName   Filter attribute name
+     * @param filterOperation Operator value
+     * @param attributeValue  Search value
+     * @return List of role names
+     * @throws org.wso2.carbon.user.core.UserStoreException Error getting roleNames.
+     */
+    private List<String> getRoleNames(String attributeName, String filterOperation, String attributeValue,
+                                      int startIndex, int count)
+            throws org.wso2.carbon.user.core.UserStoreException {
+
+        String searchAttribute = getSearchAttribute(attributeName, filterOperation, attributeValue,
+                FILTERING_DELIMITER);
+        if (log.isDebugEnabled()) {
+            log.debug(String.format("Filtering roleNames from search attribute: %s", searchAttribute));
+        }
+        String domain = SCIMCommonUtils.extractDomain(attributeValue);
+        // Extract domain from attribute value.
+        if (isInternalOrApplicationGroup(domain)) {
+            return filterHybridRoles(domain, searchAttribute, startIndex, count);
+        } else if (StringUtils.isEmpty(domain)) {
+            // When domain is empty filter through all the domains.
+//            return Arrays.asList(carbonUM.getRoleNames(searchAttribute, MAX_ITEM_LIMIT_UNLIMITED, false, true,
+//                    true, startIndex, count));
+            return Arrays.asList(carbonUM.getRoleNames(searchAttribute, MAX_ITEM_LIMIT_UNLIMITED, false, true,
+                    true));
+        } else {
+            return Arrays.asList(carbonUM.getRoleNames(searchAttribute, MAX_ITEM_LIMIT_UNLIMITED, true, true,
+                    true, startIndex, count));
+        }
+    }
+
+
     /**
      * Get list of roles that matches the search criteria.
      *
@@ -3218,7 +3331,7 @@
         String domain = SCIMCommonUtils.extractDomain(attributeValue);
         // Extract domain from attribute value.
         if (isInternalOrApplicationGroup(domain)) {
-            return filterHybridRoles(domain, searchAttribute);
+            return filterHybridRoles(domain, searchAttribute, 1, 0);
         } else if (StringUtils.isEmpty(domain)) {
             // When domain is empty filter through all the domains.
             return Arrays.asList(carbonUM.getRoleNames(searchAttribute, MAX_ITEM_LIMIT_UNLIMITED, false, true, true));
@@ -3263,7 +3376,7 @@
      * @throws org.wso2.carbon.user.core.UserStoreException
      * @throws IdentitySCIMException
      */
-    private List<String> getGroupList(ExpressionNode expressionNode, String domainName)
+    private List<String> getGroupList(ExpressionNode expressionNode, String domainName, int startIndex, int count)
             throws org.wso2.carbon.user.core.UserStoreException, CharonException {
 
         String attributeName = expressionNode.getAttributeValue();
@@ -3297,8 +3410,24 @@
 
             // Get the roles of the users.
             Set<String> fullRoleList = new HashSet<>();
+            int neededRoles = count;
             for (org.wso2.carbon.user.core.common.User user : userList) {
-                fullRoleList.addAll(carbonUM.getRoleListOfUserWithID(user.getUserID()));
+                List<String> roleListOfUserWithID;
+                if (canPaginate(startIndex, count)) {
+                    roleListOfUserWithID = carbonUM.getRoleListOfUserWithID(user.getUserID());
+                    int fullRoleListSize = fullRoleList.size();
+                    if (fullRoleListSize == 0 && roleListOfUserWithID != null) {
+                        fullRoleListSize = roleListOfUserWithID.size();
+                    }
+                    if (count <= fullRoleListSize) {
+                        fullRoleList.addAll(roleListOfUserWithID);
+                        break;
+                    }
+                } else {
+                    roleListOfUserWithID = carbonUM.getRoleListOfUserWithID(user.getUserID());
+                }
+                fullRoleList.addAll(roleListOfUserWithID);
+                neededRoles = count - fullRoleList.size();
             }
 
             List<String> roles = new ArrayList<>(fullRoleList);
@@ -3306,7 +3435,12 @@
             return roles;
         } else if (attributeName.equals(SCIMConstants.GroupSchemaConstants.DISPLAY_NAME_URI)) {
             attributeValue = prependDomainNameToTheAttributeValue(attributeValue, domainName);
-            List<String> roles = getRoleNames(attributeName, filterOperation, attributeValue);
+            List<String> roles;
+            if (canPaginate(startIndex, count)) {
+                roles = getRoleNames(attributeName, filterOperation, attributeValue, startIndex, count);
+            } else {
+                roles = getRoleNames(attributeName, filterOperation, attributeValue);
+            }
             checkForSCIMDisabledHybridRoles(roles);
             return roles;
         } else {
@@ -3329,10 +3463,7 @@
         try {
             SCIMGroupHandler groupHandler = new SCIMGroupHandler(carbonUM.getTenantId());
             Set<String> scimRoles = groupHandler.listSCIMRoles();
-            List<String> scimDisabledHybridRoles = getSCIMDisabledHybridRoleList(new HashSet<>(roles), scimRoles);
-            if (!scimDisabledHybridRoles.isEmpty()) {
-                createSCIMAttributesForSCIMDisabledHybridRoles(scimDisabledHybridRoles);
-            }
+            handleSCIMDisabledRoles(new HashSet<>(roles), scimRoles);
         } catch (org.wso2.carbon.user.core.UserStoreException | IdentitySCIMException e) {
             throw new CharonException("Error in retrieving SCIM Group information from database.", e);
         }
@@ -3480,13 +3611,22 @@
      * @return Array of filtered hybrid roles.
      * @throws org.wso2.carbon.user.core.UserStoreException
      */
-    private List<String> filterHybridRoles(String domainInAttributeValue, String searchAttribute)
+    private List<String> filterHybridRoles(String domainInAttributeValue, String searchAttribute, int startIndex,
+                                           Integer count)
             throws org.wso2.carbon.user.core.UserStoreException {
 
         List<String> roleList = new ArrayList<>();
+        String[] hybridRoles;
         // Get filtered hybrid roles by passing noInternalRoles=false.
-        String[] hybridRoles = ((AbstractUserStoreManager) carbonUM)
-                .getRoleNames(searchAttribute, MAX_ITEM_LIMIT_UNLIMITED, false, true, true);
+        if (canPaginate(startIndex, count)) {
+            hybridRoles = ((AbstractUserStoreManager) carbonUM)
+                    .getRoleNames(searchAttribute, MAX_ITEM_LIMIT_UNLIMITED, false, true,
+                            true, startIndex, count);
+        } else {
+            hybridRoles = ((AbstractUserStoreManager) carbonUM)
+                    .getRoleNames(searchAttribute, MAX_ITEM_LIMIT_UNLIMITED, false, true,
+                            true);
+        }
         // Iterate through received hybrid roles and filter out specific hybrid role
         // domain(Application or Internal) values.
         for (String hybridRole : hybridRoles) {
Index: components/org.wso2.carbon.identity.scim2.common/src/main/java/org/wso2/carbon/identity/scim2/common/DAO/GroupDAO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.scim2.common/src/main/java/org/wso2/carbon/identity/scim2/common/DAO/GroupDAO.java	(date 1578044752000)
+++ components/org.wso2.carbon.identity.scim2.common/src/main/java/org/wso2/carbon/identity/scim2/common/DAO/GroupDAO.java	(revision )
@@ -26,6 +26,7 @@
 import org.wso2.carbon.identity.scim2.common.exceptions.IdentitySCIMException;
 import org.wso2.carbon.identity.scim2.common.utils.SCIMCommonUtils;
 import org.wso2.carbon.user.core.UserCoreConstants;
+import org.wso2.carbon.user.core.model.SqlBuilder;
 import org.wso2.charon3.core.schema.SCIMConstants;
 
 import java.sql.Connection;
@@ -78,6 +79,43 @@
         }
         return groups;
     }
+
+    /**
+     * Lists the groups that are created from SCIM
+     *
+     * @return The set of groups that were created from SCIM
+     * @throws IdentitySCIMException
+     */
+    public Set<String> listSCIMGroups(int startIndex, Integer count) throws IdentitySCIMException {
+
+        Connection connection = IdentityDatabaseUtil.getDBConnection();
+        PreparedStatement prepStmt = null;
+        ResultSet resultSet = null;
+        Set<String> groups = new HashSet<>();
+
+        try {
+            SqlBuilder sqlBuilder = new SqlBuilder(new StringBuilder(SQLQueries.LIST_SCIM_GROUPS_SQL));
+            sqlBuilder.setTail(" ORDER BY ROLE_NAME ASC LIMIT ? OFFSET ?", count, startIndex);
+            // Retrieve groups from the DB.
+            prepStmt = connection.prepareStatement(sqlBuilder.getQuery());
+            prepStmt.setString(1, SCIMConstants.CommonSchemaConstants.ID_URI);
+            prepStmt.setInt(2, count);
+            prepStmt.setInt(3, startIndex - 1);
+            resultSet = prepStmt.executeQuery();
+            while (resultSet.next()) {
+                String group = resultSet.getString(1);
+                if (StringUtils.isNotEmpty(group)) {
+                    group = SCIMCommonUtils.getPrimaryFreeGroupName(group);
+                    groups.add(group);
+                }
+            }
+        } catch (SQLException e) {
+            throw new IdentitySCIMException("Error when reading the SCIM Group information from persistence store.", e);
+        } finally {
+            IdentityDatabaseUtil.closeAllConnections(connection, resultSet, prepStmt);
+        }
+        return groups;
+    }
 
     public boolean isExistingGroup(String groupName, int tenantId) throws IdentitySCIMException {
 
Index: components/org.wso2.carbon.identity.scim2.common/src/main/java/org/wso2/carbon/identity/scim2/common/group/SCIMGroupHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.scim2.common/src/main/java/org/wso2/carbon/identity/scim2/common/group/SCIMGroupHandler.java	(date 1578044752000)
+++ components/org.wso2.carbon.identity.scim2.common/src/main/java/org/wso2/carbon/identity/scim2/common/group/SCIMGroupHandler.java	(revision )
@@ -232,8 +232,19 @@
         return groupDAO.listSCIMGroups();
     }
 
+    /**
+     * Lists the Groups created from SCIM
+     *
+     * @return list of SCIM groups
+     * @throws IdentitySCIMException
+     */
+    public Set<String> listSCIMRoles(int startIndex, Integer count) throws IdentitySCIMException {
+        GroupDAO groupDAO = new GroupDAO();
+        return groupDAO.listSCIMGroups(startIndex, count);
+    }
+
     /**
-     * Lists the Groups created from SCIM with a attribute filter and search regex.
+     * Lists the Groups     created from SCIM with a attribute filter and search regex.
      *
      * @param attributeName   Search attribute name
      * @param searchAttribute Search attribute value
Index: components/org.wso2.carbon.identity.scim2.common/src/test/java/org/wso2/carbon/identity/scim2/common/impl/SCIMUserManagerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- components/org.wso2.carbon.identity.scim2.common/src/test/java/org/wso2/carbon/identity/scim2/common/impl/SCIMUserManagerTest.java	(date 1578044752000)
+++ components/org.wso2.carbon.identity.scim2.common/src/test/java/org/wso2/carbon/identity/scim2/common/impl/SCIMUserManagerTest.java	(revision )
@@ -355,7 +355,7 @@
         when(SCIMCommonUtils.getSCIMtoLocalMappings()).thenReturn(scimToLocalClaimsMap);
 
         SCIMUserManager scimUserManager = new SCIMUserManager(mockedUserStoreManager, mockedClaimManager);
-        List<Object> roleList = scimUserManager.listGroupsWithGET(node, 1, 1, null, null,
+        List<Object> roleList = scimUserManager.listGroupsWithGET(node, 1, null, null, null,
                 null, requiredAttributes);
 
         assertEquals(roleList.size(), 2);
